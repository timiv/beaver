/***
 * Beaver: compiler front-end construction toolkit                       
 * Copyright (c) 2003-2007 Alexander Demenchuk <alder@softanvil.com>  
 * All rights reserved.                       
 *                          
 * See the file "LICENSE" for the terms and conditions for copying,    
 * distribution and modification of Beaver.                            
 */
package beaver;

import java.io.IOException;

/**
 * Defines an "interface" that parser uses to retrieve tokens and information about them.
 * It exists solely to allow hooking up other, not generated by the Beaver, scanners (and
 * why would anyone want this? ;-)
 *
 * @author Alexander Demenchuk
 */
public abstract class Scanner
{
	/**
	 * Returns ID of the next token recognized by a scanner or 0 when EOF is reached.
	 *
	 * @return an ID of the next token from the text.
	 * @throws UnexpectedCharacterException - if an unexpected character is encountered
	 */
	public abstract int next() throws UnexpectedCharacterException, IOException;

	/**
	 * Returns symbols (characters or bytes) of the just recognized token,
	 * which ID was returned by next().
	 *
	 * @return text of the recognized token
	 */
	public abstract String getValue();

	/**
	 * Returns number of symbols (characters or bytes) in the just recognized token,
	 * which ID was returned by next().
	 *
	 * @return length of the recognized token
	 */
	public abstract int getLength();

	/**
	 * Returns a line number of the current token.
	 * Makes sense for character based scanner only.
	 * 
	 * @return line number where the last token was found
	 */
	public abstract int getLine();

	/**
	 * Returns a column number (offset from the beginning of the file/stream in binary scanners)
	 * of the token's first symbol
	 *
	 * @return position of the first symbol of the recognized token
	 */
	public abstract int getColumn();
}
