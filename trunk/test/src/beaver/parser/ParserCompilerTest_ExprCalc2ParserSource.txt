package test2;

public abstract class ExprCalc2 extends beaver.Parser {
	public ExprCalc2() throws java.io.IOException {
		super(ExprCalc2.class.getResourceAsStream("ExprCalc2.bpt"));
	}
	protected abstract Eval makeEval(StmtList optStmtList, Expr optExpr);
	protected abstract StmtList makeOptStmtList(StmtList stmtList);
	protected abstract StmtList makeOptStmtList();
	protected abstract Expr makeOptExpr(Expr expr);
	protected abstract Expr makeOptExpr();
	protected abstract StmtList makeNewStmtList(Stmt stmt);
	protected abstract StmtList makeExtStmtList(StmtList stmtList, Stmt stmt);
	protected abstract Stmt makeStmt(Term id, Expr expr);
	protected abstract Expr makeNumExpr(Term num);
	protected abstract Expr makeVarExpr(Term id);
	protected abstract Expr makeNestedExpr(Expr expr);
	protected abstract Expr makeAddExpr(Expr left, Expr right);
	protected abstract Expr makeSubExpr(Expr left, Expr right);
	protected abstract Expr makeMulExpr(Expr left, Expr right);
	protected abstract Expr makeDivExpr(Expr left, Expr right);
	protected abstract Object makeTerm(Object text, int line, int column);
	protected Object reduce(Object[] stack, int top, int rule) {
		switch (rule) {
			case 0: { // Eval = OptStmtList OptExpr
				return makeEval((StmtList) stack[top + 1], (Expr) stack[top]);
			}
			case 1: { // OptStmtList = StmtList
				return makeOptStmtList((StmtList) stack[top]);
			}
			case 2: { // OptStmtList =
				return makeOptStmtList();
			}
			case 3: { // OptExpr = Expr
				return makeOptExpr((Expr) stack[top]);
			}
			case 4: { // OptExpr =
				return makeOptExpr();
			}
			case 5: { // StmtList = { New } Stmt
				return makeNewStmtList((Stmt) stack[top]);
			}
			case 6: { // StmtList = { Ext } StmtList Stmt
				return makeExtStmtList((StmtList) stack[top + 1], (Stmt) stack[top]);
			}
			case 7: { // Stmt = ID "=" Expr ";"
				return makeStmt((Term) stack[top + 3], (Expr) stack[top + 1]);
			}
			case 8: { // Expr = { Num } NUM
				return makeNumExpr((Term) stack[top]);
			}
			case 9: { // Expr = { Var } ID
				return makeVarExpr((Term) stack[top]);
			}
			case 10: { // Expr = { Nested } "(" Expr ")"
				return makeNestedExpr((Expr) stack[top + 1]);
			}
			case 11: { // Expr = { Add } left:Expr "+" right:Expr
				return makeAddExpr((Expr) stack[top + 2], (Expr) stack[top]);
			}
			case 12: { // Expr = { Sub } left:Expr "-" right:Expr
				return makeSubExpr((Expr) stack[top + 2], (Expr) stack[top]);
			}
			case 13: { // Expr = { Mul } left:Expr "*" right:Expr
				return makeMulExpr((Expr) stack[top + 2], (Expr) stack[top]);
			}
			case 14: { // Expr = { Div } left:Expr "/" right:Expr
				return makeDivExpr((Expr) stack[top + 2], (Expr) stack[top]);
			}
		}
		throw new IndexOutOfBoundsException("production #" + rule);
	}
}
