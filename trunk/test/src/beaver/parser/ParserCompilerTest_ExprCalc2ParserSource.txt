public abstract class ExprCalc2 extends beaver.Parser {
	public ExprCalc2() {
		super(ExprCalc2.class.getResourceAsStream("ExprCalc2.bpt"));
	}
	protected abstract Eval makeEval(StmtList optStmtList, Expr optExpr);
	protected abstract StmtList makeOptStmtList(StmtList stmtList);
	protected abstract StmtList makeOptStmtList();
	protected abstract Expr makeOptExpr(Expr expr);
	protected abstract Expr makeOptExpr();
	protected abstract StmtList makeNewStmtList(Stmt stmt);
	protected abstract StmtList makeExtStmtList(StmtList stmtList, Stmt stmt);
	protected abstract Stmt makeStmt(Term id, Expr expr);
	protected abstract Expr makeNumExpr(Term num);
	protected abstract Expr makeVarExpr(Term id);
	protected abstract Expr makeNestedExpr(Expr expr);
	protected abstract Expr makeAddExpr(Expr left, Expr right);
	protected abstract Expr makeSubExpr(Expr left, Expr right);
	protected abstract Expr makeMulExpr(Expr left, Expr right);
	protected abstract Expr makeDivExpr(Expr left, Expr right);
	protected Object reduce(Object[] stack, int top, int rule) {
		switch (rule) {
			case 0: { // Eval = OptStmtList OptExpr
				StmtList optStmtList = (StmtList) stack[top + 1];
				Expr optExpr = (Expr) stack[top];

				return makeEval(optStmtList, optExpr);
			}
			case 1: { // OptStmtList = StmtList
				StmtList stmtList = (StmtList) stack[top];

				return makeOptStmtList(stmtList);
			}
			case 2: { // OptStmtList =

				return makeOptStmtList();
			}
			case 3: { // OptExpr = Expr
				Expr expr = (Expr) stack[top];

				return makeOptExpr(expr);
			}
			case 4: { // OptExpr =

				return makeOptExpr();
			}
			case 5: { // StmtList = { New } Stmt
				Stmt stmt = (Stmt) stack[top];

				return makeNewStmtList(stmt);
			}
			case 6: { // StmtList = { Ext } StmtList Stmt
				StmtList stmtList = (StmtList) stack[top + 1];
				Stmt stmt = (Stmt) stack[top];

				return makeExtStmtList(stmtList, stmt);
			}
			case 7: { // Stmt = ID "=" Expr ";"
				Term id = (Term) stack[top + 3];
				Expr expr = (Expr) stack[top + 1];

				return makeStmt(id, expr);
			}
			case 8: { // Expr = { Num } NUM
				Term num = (Term) stack[top];

				return makeNumExpr(num);
			}
			case 9: { // Expr = { Var } ID
				Term id = (Term) stack[top];

				return makeVarExpr(id);
			}
			case 10: { // Expr = { Nested } "(" Expr ")"
				Expr expr = (Expr) stack[top + 1];

				return makeNestedExpr(expr);
			}
			case 11: { // Expr = { Add } left:Expr "+" right:Expr
				Expr left = (Expr) stack[top + 2];
				Expr right = (Expr) stack[top];

				return makeAddExpr(left, right);
			}
			case 12: { // Expr = { Sub } left:Expr "-" right:Expr
				Expr left = (Expr) stack[top + 2];
				Expr right = (Expr) stack[top];

				return makeSubExpr(left, right);
			}
			case 13: { // Expr = { Mul } left:Expr "*" right:Expr
				Expr left = (Expr) stack[top + 2];
				Expr right = (Expr) stack[top];

				return makeMulExpr(left, right);
			}
			case 14: { // Expr = { Div } left:Expr "/" right:Expr
				Expr left = (Expr) stack[top + 2];
				Expr right = (Expr) stack[top];

				return makeDivExpr(left, right);
			}
		}
		throw new IndexOutOfBoundsException("production #" + rule);
	}
}
