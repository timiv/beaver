public abstract class ExprCalc extends beaver.Parser {
	public ExprCalc() {
		super(ExprCalc.class.getResourceAsStream("ExprCalc.bpt"));
	}
	protected abstract Eval makeGoal(Eval eval);
	protected abstract Eval makeExprEval(Expr expr);
	protected abstract Eval makeStmtEval(Stmt stmt);
	protected abstract Stmt makeStmt(Term id, Expr expr);
	protected abstract Expr makeNumberExpr(Term num);
	protected abstract Expr makeVarExpr(Term id);
	protected abstract Expr makeNestedExpr(Expr expr);
	protected abstract Expr makeAddExpr(Expr left, Expr right);
	protected abstract Expr makeSubExpr(Expr left, Expr right);
	protected abstract Expr makeMulExpr(Expr expr, Expr expr2);
	protected abstract Expr makeDivExpr(Expr expr, Expr expr2);
	protected Object reduce(Object[] stack, int top, int rule) {
		switch (rule) {
			case 0: { // Goal = Eval
				Eval eval = (Eval) stack[top];

				return makeGoal(eval);
			}
			case 1: { // Eval = { Expr } Expr
				Expr expr = (Expr) stack[top];

				return makeExprEval(expr);
			}
			case 2: { // Eval = { Stmt } Stmt
				Stmt stmt = (Stmt) stack[top];

				return makeStmtEval(stmt);
			}
			case 3: { // Stmt = ID "=" Expr ";"
				Term id = (Term) stack[top + 3];
				Expr expr = (Expr) stack[top + 1];

				return makeStmt(id, expr);
			}
			case 4: { // Expr = { Number } NUM
				Term num = (Term) stack[top];

				return makeNumberExpr(num);
			}
			case 5: { // Expr = { Var } ID
				Term id = (Term) stack[top];

				return makeVarExpr(id);
			}
			case 6: { // Expr = { Nested } "(" Expr ")"
				Expr expr = (Expr) stack[top + 1];

				return makeNestedExpr(expr);
			}
			case 7: { // Expr = { Add } left:Expr "+" right:Expr
				Expr left = (Expr) stack[top + 2];
				Expr right = (Expr) stack[top];

				return makeAddExpr(left, right);
			}
			case 8: { // Expr = { Sub } left:Expr "-" right:Expr
				Expr left = (Expr) stack[top + 2];
				Expr right = (Expr) stack[top];

				return makeSubExpr(left, right);
			}
			case 9: { // Expr = { Mul } Expr "*" Expr
				Expr expr = (Expr) stack[top + 2];
				Expr expr2 = (Expr) stack[top];

				return makeMulExpr(expr, expr2);
			}
			case 10: { // Expr = { Div } Expr "/" Expr
				Expr expr = (Expr) stack[top + 2];
				Expr expr2 = (Expr) stack[top];

				return makeDivExpr(expr, expr2);
			}
		}
		throw new IndexOutOfBoundsException("production #" + rule);
	}
}
